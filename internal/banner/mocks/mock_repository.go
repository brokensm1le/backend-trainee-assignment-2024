// Code generated by MockGen. DO NOT EDIT.
// Source: internal/banner/repository.go

// Package mock_banner is a generated GoMock package.
package mock_banner

import (
	banner "backend-trainee-assignment-2024/internal/banner"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockRepository) CreateBanner(params *banner.CreateBannerParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockRepositoryMockRecorder) CreateBanner(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockRepository)(nil).CreateBanner), params)
}

// DeleteBanner mocks base method.
func (m *MockRepository) DeleteBanner(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockRepositoryMockRecorder) DeleteBanner(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockRepository)(nil).DeleteBanner), id)
}

// DeleteVersion mocks base method.
func (m *MockRepository) DeleteVersion(versionId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersion", versionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersion indicates an expected call of DeleteVersion.
func (mr *MockRepositoryMockRecorder) DeleteVersion(versionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersion", reflect.TypeOf((*MockRepository)(nil).DeleteVersion), versionId)
}

// GetAllBanners mocks base method.
func (m *MockRepository) GetAllBanners() (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBanners")
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBanners indicates an expected call of GetAllBanners.
func (mr *MockRepositoryMockRecorder) GetAllBanners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBanners", reflect.TypeOf((*MockRepository)(nil).GetAllBanners))
}

// GetBanner mocks base method.
func (m *MockRepository) GetBanner(params *banner.GetFilteredBannersParams) (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", params)
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner.
func (mr *MockRepositoryMockRecorder) GetBanner(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockRepository)(nil).GetBanner), params)
}

// GetBannerAdmin mocks base method.
func (m *MockRepository) GetBannerAdmin(params *banner.GetFilteredBannersParams) (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerAdmin", params)
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannerAdmin indicates an expected call of GetBannerAdmin.
func (mr *MockRepositoryMockRecorder) GetBannerAdmin(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerAdmin", reflect.TypeOf((*MockRepository)(nil).GetBannerAdmin), params)
}

// GetContentBanner mocks base method.
func (m *MockRepository) GetContentBanner(params *banner.GetBannerParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentBanner", params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentBanner indicates an expected call of GetContentBanner.
func (mr *MockRepositoryMockRecorder) GetContentBanner(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentBanner", reflect.TypeOf((*MockRepository)(nil).GetContentBanner), params)
}

// GetContentBannerAdmin mocks base method.
func (m *MockRepository) GetContentBannerAdmin(params *banner.GetBannerParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentBannerAdmin", params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentBannerAdmin indicates an expected call of GetContentBannerAdmin.
func (mr *MockRepositoryMockRecorder) GetContentBannerAdmin(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentBannerAdmin", reflect.TypeOf((*MockRepository)(nil).GetContentBannerAdmin), params)
}

// GetFilteredBannersFID mocks base method.
func (m *MockRepository) GetFilteredBannersFID(params *banner.GetFilteredBannersParams) (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredBannersFID", params)
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredBannersFID indicates an expected call of GetFilteredBannersFID.
func (mr *MockRepositoryMockRecorder) GetFilteredBannersFID(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredBannersFID", reflect.TypeOf((*MockRepository)(nil).GetFilteredBannersFID), params)
}

// GetFilteredBannersFIDAdmin mocks base method.
func (m *MockRepository) GetFilteredBannersFIDAdmin(params *banner.GetFilteredBannersParams) (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredBannersFIDAdmin", params)
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredBannersFIDAdmin indicates an expected call of GetFilteredBannersFIDAdmin.
func (mr *MockRepositoryMockRecorder) GetFilteredBannersFIDAdmin(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredBannersFIDAdmin", reflect.TypeOf((*MockRepository)(nil).GetFilteredBannersFIDAdmin), params)
}

// GetFilteredBannersTID mocks base method.
func (m *MockRepository) GetFilteredBannersTID(params *banner.GetFilteredBannersParams) (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredBannersTID", params)
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredBannersTID indicates an expected call of GetFilteredBannersTID.
func (mr *MockRepositoryMockRecorder) GetFilteredBannersTID(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredBannersTID", reflect.TypeOf((*MockRepository)(nil).GetFilteredBannersTID), params)
}

// GetFilteredBannersTIDAdmin mocks base method.
func (m *MockRepository) GetFilteredBannersTIDAdmin(params *banner.GetFilteredBannersParams) (*[]banner.GetFilteredBannersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredBannersTIDAdmin", params)
	ret0, _ := ret[0].(*[]banner.GetFilteredBannersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredBannersTIDAdmin indicates an expected call of GetFilteredBannersTIDAdmin.
func (mr *MockRepositoryMockRecorder) GetFilteredBannersTIDAdmin(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredBannersTIDAdmin", reflect.TypeOf((*MockRepository)(nil).GetFilteredBannersTIDAdmin), params)
}

// GetVersionByBannerID mocks base method.
func (m *MockRepository) GetVersionByBannerID(id int64) (*[]banner.GetVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionByBannerID", id)
	ret0, _ := ret[0].(*[]banner.GetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionByBannerID indicates an expected call of GetVersionByBannerID.
func (mr *MockRepositoryMockRecorder) GetVersionByBannerID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionByBannerID", reflect.TypeOf((*MockRepository)(nil).GetVersionByBannerID), id)
}

// GetVersionByID mocks base method.
func (m *MockRepository) GetVersionByID(id int64) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionByID", id)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionByID indicates an expected call of GetVersionByID.
func (mr *MockRepositoryMockRecorder) GetVersionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionByID", reflect.TypeOf((*MockRepository)(nil).GetVersionByID), id)
}

// UpdateBanner mocks base method.
func (m *MockRepository) UpdateBanner(params *banner.UpdateBannerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockRepositoryMockRecorder) UpdateBanner(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockRepository)(nil).UpdateBanner), params)
}
